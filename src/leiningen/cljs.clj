(ns leiningen.cljs
  (:refer-clojure :exclude [compile])
  (:use [leiningen.help :only (help-for)]
        [leiningen.compile :only (eval-in-project)])
  (:import (java.io BufferedReader InputStreamReader)
           java.io.File))

(def resources-dir "resources/public")

(defn- process-io [process]
  (let [reader (BufferedReader.
                (InputStreamReader. (.getInputStream process)))]
    (dorun (map println (line-seq reader)))))

(defn- exec
  [command]
  (println "Executing:" command)
  (process-io (.. Runtime getRuntime (exec command))))

(defn- cljsc
  [project options]
  (println "Compiling ClojureScript ...")
  (eval-in-project (dissoc project :cljs-source-path)
                   `(cljsc/build ~(:cljs-source-path project) ~options)
                   nil nil
                   '(require '[cljs.closure :as cljsc])))

(defn- compile
  "Compiles ClojureScript to JavaScript"
  [project]
  (cljsc project {:output-dir (str resources-dir "/out")
                  :output-to (str resources-dir "/" (:name project) ".js")
                  :optimizations :advanced}))

(defn- compile-dev
  "Compiles ClojureScript to JavaScript, without optimizations"
  [project]
  (cljsc project {:output-dir (str resources-dir "/out-dev")
                  :output-to (str resources-dir "/" (:name project) "-dev.js")
                  :pretty-print true}))

(defn- war
  "Bundles the generated JavaScript and other resources in a WAR"
  [project]
  (compile project)
  (let [project-name (:name project)
        files (seq (.listFiles (File. resources-dir)))
        relevant-files (filter (fn [x]
                                 (let [name (.getName x)]
                                   (not (or (.startsWith name ".")
                                            (.endsWith name "-dev.js")
                                            (.endsWith name "-dev.html")))))
                               files)
        files-str (reduce (fn [x y] (str x " " y)) relevant-files)]
    (exec (str "zip -j " project-name ".war " files-str))))

(defn- clean
  "Removes all artifacts generated by this plugin"
  [project]
  (let [project-name (:name project)]
    (exec (str "rm -rf " project-name ".war " resources-dir "/" project-name
               ".js " resources-dir "/" project-name "-dev.js out out-dev"))))

(defn cljs
  "Work with ClojureScript"
  {:help-arglists '([compile compile-dev war clean])
   :subtasks [#'compile #'compile-dev #'war #'clean]}
  ([project]
     (println (help-for "cljs")))
  ([project subtask & args]
     (case subtask
           "compile" (compile project)
           "compile-dev" (compile-dev project)
           "war" (war project)
           "clean" (clean project))))