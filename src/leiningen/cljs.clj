(ns leiningen.cljs
  (:refer-clojure :exclude [compile])
  (:use [leiningen.help :only (help-for)])
  (:import (java.io BufferedReader InputStreamReader)
           java.io.File))

(def resources-dir "resources/public")

(defn- cmd [p] (.. Runtime getRuntime (exec (str p)))) 

(defn- cmdout [o] 
  (let [r (BufferedReader. 
             (InputStreamReader. 
               (.getInputStream o)))] 
    (dorun (map println (line-seq r)))))

(defn- exec
  [command]
  (println "Executing:" command)
  (cmdout (cmd command)))

(defn- cljsc
  [source-dir options]
  (let [clojurescript-home (get (System/getenv) "CLOJURESCRIPT_HOME")]
    (exec (str clojurescript-home "/bin/cljsc " source-dir
               (if options (str " " options))))))

(defn- compile
  "Compiles ClojureScript to JavaScript"
  [project]
  (cljsc "src" (str "{:output-to \"" resources-dir "/" (:name project)
                    ".js\" :optimizations :advanced}")))

(defn- compile-dev
  "Compiles ClojureScript to JavaScript, without optimizations"
  [project]
  (cljsc "src" (str "{:output-dir \"out-dev\" :output-to \"" resources-dir "/"
                    (:name project) "-dev.js\" :pretty-print true}")))

(defn- war
  "Bundles the generated JavaScript and other resources in a WAR"
  [project]
  (compile project)
  (let [project-name (:name project)
        files (seq (.listFiles (File. resources-dir)))
        relevant-files (filter (fn [x]
                                 (let [name (.getName x)]
                                   (not (or (.startsWith name ".")
                                            (.endsWith name "-dev.js")
                                            (.endsWith name "-dev.html")))))
                               files)
        files-str (reduce (fn [x y] (str x " " y)) relevant-files)]
    (exec (str "zip " project-name ".war " files-str))))

(defn- clean
  "Removes all artifacts generated by this plugin"
  [project]
  (let [project-name (:name project)]
    (exec (str "rm -rf " project-name ".war " resources-dir "/" project-name
               ".js " resources-dir "/" project-name "-dev.js out out-dev"))))

(defn cljs
  "Work with ClojureScript"
  {:help-arglists '([compile compile-dev war clean])
   :subtasks [#'compile #'compile-dev #'war #'clean]}
  ([project]
     (println (help-for "cljs")))
  ([project subtask & args]
     (case subtask
           "compile" (compile project)
           "compile-dev" (compile-dev project)
           "war" (war project)
           "clean" (clean project))))